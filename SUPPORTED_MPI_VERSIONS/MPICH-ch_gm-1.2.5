#!/bin/sh
#

THIS_VERSION="MPICH-ch_gm-1.2.5"

usage () {

cat <<EOF
Usage: $THIS_VERSION -np processors progname [-h]
       mpirun wrapper.
       Environment variables: MACHINEFILE, MPI_BIN_DIR, NODEFILE, NODE_NUM_PROCS
EOF
exit 0

}


build_machinefile() {

handled_procs=0
rm -f $MACHINEFILE
touch $MACHINEFILE

for i in `cat $NODEFILE`; do
    local_procs=0
    while test $local_procs -lt $NODE_NUM_PROCS; do
	if test $handled_procs -lt $np; then
	    echo $i >> $MACHINEFILE
	    local_procs=`echo $local_procs+1 | bc`
	    handled_procs=`echo $handled_procs+1 | bc`
	fi	
    done
done
 
}

run () {
    
    if [ -z "$MPI_BIN_DIR" ];then usage; fi;
    if [ -z "$NODEFILE" ];then usage; fi;
    if [ -z "$NODE_NUM_PROCS" ];then usage; fi;
    if [ -z "$MACHINEFILE" ];then MACHINEFILE="$HOME/.machinefile"; fi;

    build_machinefile
    
# mpirun
    vendor_mpirun=$MPI_BIN_DIR"/mpirun.ch_gm"
# std command
    command="$vendor_mpirun -np $np -machinefile $MACHINEFILE "$command
    exec $command
    
}

check_version () {

libmpich="$MPI_LIB_PATH/libmpich.a"
if test -f "$libmpich" ; then
    ver=`grep MPIVERSION $MPI_BIN_PATH/mpirun | sed 's/.*" *\(.*\)".*/\1/' | cut -d' ' -f1` 
    if test $? -eq 1; then 
	ver="UNKNOWN"
    fi
    device=`grep DEFAULT_DEVICE $MPI_BIN_PATH/mpirun | sed 's/ //g' |  sed 's/.*=\(.*\)/\1/'`
    if test $? -eq 1; then 
	device="UNKNOWN"
    fi
    MPI_VERSION="MPICH-"$device"-"$ver
    if test x"$MPI_VERSION" = x"$THIS_VERSION"; then
	echo $THIS_VERSION
    fi
fi

}

#
# Handle user arguments
#
basecmd=`basename $0`
if test x"$basecmd" = x"$THIS_VERSION"; then 
    command=""
    while [ $# -ge 1 ]; do
	case $1 in
	    -h              ) usage; exit 0 ;;
            -np             ) shift; np=$1;;
            *               ) command="$command $1";;
	esac
	shift
    done
fi
if test x"$basecmd" != "xconfigure"; then 
    run
fi
